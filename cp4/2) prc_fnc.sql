-- Header do Package
CREATE OR REPLACE PACKAGE PKG_ETL_VENDAS AS
    PROCEDURE PRC_CARGA_DIM_CLIENTE;
    PROCEDURE PRC_CARGA_DIM_VENDEDOR;
    PROCEDURE PRC_CARGA_DIM_PRODUTO;
    PROCEDURE PRC_CARGA_DIM_LOCALIDADE;
    PROCEDURE PRC_CARGA_DIM_TEMPO;
    PROCEDURE PRC_CARGA_FATO_VENDAS;
    PROCEDURE PRC_CARGA_GERAL_ETL;
END PKG_ETL_VENDAS;
/

-- Body do Package
CREATE OR REPLACE PACKAGE BODY PKG_ETL_VENDAS AS

    PROCEDURE PRC_CARGA_DIM_CLIENTE AS
    BEGIN
        MERGE INTO DIM_CLIENTE d
        USING (
            SELECT COD_CLIENTE, NOM_CLIENTE, TIP_PESSOA, NUM_CPF_CNPJ FROM CLIENTE
        ) c ON (d.COD_CLIENTE_ORIGEM = c.COD_CLIENTE)
        WHEN NOT MATCHED THEN
            INSERT (d.SK_CLIENTE, d.COD_CLIENTE_ORIGEM, d.NOME_CLIENTE, d.TIPO_PESSOA, d.CPF_CNPJ)
            VALUES (SEQ_DIM_CLIENTE.NEXTVAL, c.COD_CLIENTE, UPPER(TRIM(c.NOM_CLIENTE)), c.TIP_PESSOA, c.NUM_CPF_CNPJ);
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('1. Carga da Dimensão Cliente concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_DIM_CLIENTE: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_DIM_CLIENTE;

    PROCEDURE PRC_CARGA_DIM_VENDEDOR AS
    BEGIN
        MERGE INTO DIM_VENDEDOR d
        USING (
            SELECT COD_VENDEDOR, NOM_VENDEDOR FROM VENDEDOR
        ) v ON (d.COD_VENDEDOR_ORIGEM = v.COD_VENDEDOR)
        WHEN NOT MATCHED THEN
            INSERT (d.SK_VENDEDOR, d.COD_VENDEDOR_ORIGEM, d.NOME_VENDEDOR)
            VALUES (SEQ_DIM_VENDEDOR.NEXTVAL, v.COD_VENDEDOR, UPPER(TRIM(v.NOM_VENDEDOR)));
            
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('2. Carga da Dimensão Vendedor concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_DIM_VENDEDOR: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_DIM_VENDEDOR;

    PROCEDURE PRC_CARGA_DIM_PRODUTO AS
    BEGIN
        MERGE INTO DIM_PRODUTO d
        USING (
            SELECT COD_PRODUTO, NOM_PRODUTO, COD_BARRA FROM PRODUTO
        ) p ON (d.COD_PRODUTO_ORIGEM = p.COD_PRODUTO)
        WHEN NOT MATCHED THEN
            INSERT (d.SK_PRODUTO, d.COD_PRODUTO_ORIGEM, d.NOME_PRODUTO, d.COD_BARRA)
            VALUES (SEQ_DIM_PRODUTO.NEXTVAL, p.COD_PRODUTO, UPPER(TRIM(p.NOM_PRODUTO)), p.COD_BARRA);
            
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('3. Carga da Dimensão Produto concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_DIM_PRODUTO: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_DIM_PRODUTO;

    PROCEDURE PRC_CARGA_DIM_LOCALIDADE AS
    BEGIN
        MERGE INTO DIM_LOCALIDADE d
        USING (
            SELECT -1 AS SK, -1 AS COD_ORIGEM, 'Não Informado' AS CIDADE, 'N/A' AS ESTADO, 'N/A' AS PAIS FROM DUAL
        ) s ON (d.SK_LOCALIDADE = s.SK)
        WHEN NOT MATCHED THEN
            INSERT (SK_LOCALIDADE, COD_CIDADE_ORIGEM, CIDADE, ESTADO, PAIS)
            VALUES (s.SK, s.COD_ORIGEM, s.CIDADE, s.ESTADO, s.PAIS);
            
        MERGE INTO DIM_LOCALIDADE d
        USING (
            SELECT DISTINCT c.COD_CIDADE, c.NOM_CIDADE, e.NOM_ESTADO, p.NOM_PAIS
            FROM CIDADE c
            JOIN ESTADO e ON c.COD_ESTADO = e.COD_ESTADO
            JOIN PAIS p ON e.COD_PAIS = p.COD_PAIS
            WHERE c.COD_CIDADE IN (
                SELECT DISTINCT COD_CIDADE FROM ENDERECO_CLIENTE WHERE COD_CIDADE IS NOT NULL
            )
        ) s ON (d.COD_CIDADE_ORIGEM = s.COD_CIDADE)
        WHEN NOT MATCHED THEN
            INSERT (d.SK_LOCALIDADE, d.COD_CIDADE_ORIGEM, d.CIDADE, d.ESTADO, d.PAIS)
            VALUES (SEQ_DIM_LOCALIDADE.NEXTVAL, s.COD_CIDADE, s.NOM_CIDADE, s.NOM_ESTADO, s.NOM_PAIS);
            
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('4. Carga da Dimensão Localidade concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_DIM_LOCALIDADE: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_DIM_LOCALIDADE;

    PROCEDURE PRC_CARGA_DIM_TEMPO AS
    BEGIN
        MERGE INTO DIM_TEMPO d
        USING (
            SELECT DISTINCT TRUNC(DAT_PEDIDO) AS DATA_PEDIDO FROM PEDIDO WHERE DAT_PEDIDO IS NOT NULL
        ) p ON (d.DATA_COMPLETA = p.DATA_PEDIDO)
        WHEN NOT MATCHED THEN
            INSERT (d.SK_TEMPO, d.DATA_COMPLETA, d.DIA, d.MES, d.ANO, d.NOME_MES, d.TRIMESTRE, d.SEMESTRE)
            VALUES (
                SEQ_DIM_TEMPO.NEXTVAL,
                p.DATA_PEDIDO,
                TO_NUMBER(TO_CHAR(p.DATA_PEDIDO, 'DD')),
                TO_NUMBER(TO_CHAR(p.DATA_PEDIDO, 'MM')),
                TO_NUMBER(TO_CHAR(p.DATA_PEDIDO, 'YYYY')),
                TRIM(TO_CHAR(p.DATA_PEDIDO, 'MONTH', 'NLS_DATE_LANGUAGE=PORTUGUESE')),
                'Q' || TO_CHAR(p.DATA_PEDIDO, 'Q'),
                'S' || CASE WHEN TO_CHAR(p.DATA_PEDIDO, 'Q') <= '2' THEN '1' ELSE '2' END
            );
            
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('5. Carga da Dimensão Tempo concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_DIM_TEMPO: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_DIM_TEMPO;

    PROCEDURE PRC_CARGA_FATO_VENDAS AS
        v_max_sk_localidade NUMBER;
    BEGIN
        SELECT NVL(MAX(SK_LOCALIDADE), 1)
        INTO v_max_sk_localidade
        FROM DIM_LOCALIDADE
        WHERE SK_LOCALIDADE > 0;
        
        EXECUTE IMMEDIATE 'TRUNCATE TABLE FATO_VENDAS';
        
        INSERT INTO FATO_VENDAS (
            SK_CLIENTE, SK_VENDEDOR, SK_PRODUTO, SK_TEMPO, SK_LOCALIDADE,
            COD_PEDIDO, QUANTIDADE_VENDIDA, VALOR_UNITARIO, VALOR_DESCONTO, VALOR_TOTAL_ITEM
        )
        SELECT
            dc.SK_CLIENTE,
            dv.SK_VENDEDOR,
            dp.SK_PRODUTO,
            dt.SK_TEMPO,
            CASE
                WHEN p.SEQ_ENDERECO_CLIENTE IS NULL THEN
                    CASE WHEN MOD(p.COD_PEDIDO, 5) > 0 THEN -1 ELSE MOD(p.COD_PEDIDO, v_max_sk_localidade) + 1 END
                ELSE NVL(dl.SK_LOCALIDADE, -1)
            END AS SK_LOCALIDADE,
            p.COD_PEDIDO,
            ip.QTD_ITEM,
            ip.VAL_UNITARIO_ITEM,
            ip.VAL_DESCONTO_ITEM,
            (ip.QTD_ITEM * ip.VAL_UNITARIO_ITEM) - NVL(ip.VAL_DESCONTO_ITEM, 0)
        FROM PEDIDO p
        JOIN ITEM_PEDIDO ip ON p.COD_PEDIDO = ip.COD_PEDIDO
        JOIN DIM_CLIENTE dc ON p.COD_CLIENTE = dc.COD_CLIENTE_ORIGEM
        JOIN DIM_VENDEDOR dv ON p.COD_VENDEDOR = dv.COD_VENDEDOR_ORIGEM
        JOIN DIM_PRODUTO dp ON ip.COD_PRODUTO = dp.COD_PRODUTO_ORIGEM
        JOIN DIM_TEMPO dt ON TRUNC(p.DAT_PEDIDO) = dt.DATA_COMPLETA
        LEFT JOIN ENDERECO_CLIENTE ec ON p.SEQ_ENDERECO_CLIENTE = ec.SEQ_ENDERECO_CLIENTE
        LEFT JOIN DIM_LOCALIDADE dl ON ec.COD_CIDADE = dl.COD_CIDADE_ORIGEM
        WHERE p.DAT_CANCELAMENTO IS NULL;
        
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('6. Carga da Tabela Fato (com simulação dinâmica) concluída com sucesso.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Erro em PRC_CARGA_FATO_VENDAS: ' || SQLERRM);
            ROLLBACK;
    END PRC_CARGA_FATO_VENDAS;

    PROCEDURE PRC_CARGA_GERAL_ETL AS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('--- INICIANDO PROCESSO DE CARGA GERAL DO DW ---');
        
        PRC_CARGA_DIM_CLIENTE;
        PRC_CARGA_DIM_VENDEDOR;
        PRC_CARGA_DIM_PRODUTO;
        PRC_CARGA_DIM_LOCALIDADE;
        PRC_CARGA_DIM_TEMPO;
        PRC_CARGA_FATO_VENDAS;
        
        DBMS_OUTPUT.PUT_LINE('--- PROCESSO DE CARGA GERAL DO DW FINALIZADO ---');
    END PRC_CARGA_GERAL_ETL;

END PKG_ETL_VENDAS;
/
